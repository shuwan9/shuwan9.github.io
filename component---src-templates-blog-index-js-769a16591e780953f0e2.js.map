{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/utils/helpers.js","webpack:///./src/components/Bio.js","webpack:///./src/components/Footer.js","webpack:///./src/templates/blog-index.js"],"names":["SEO","meta","image","title","description","slug","lang","query","render","data","siteMetadata","site","metaDescription","metaImage","siteUrl","url","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","formatReadingTime","minutes","cups","Math","round","Array","E","fill","join","formatPostDate","date","Date","prototype","toLocaleDateString","args","day","month","year","filter","Boolean","Bio","style","display","marginBottom","rhythm","maxWidth","href","React","Component","Footer","marginTop","paddingTop","float","target","rel","BlogIndexTemplate","siteTitle","get","this","props","homeSrc","homeBg","langKey","pageContext","posts","Layout","location","bg","src","map","node","fields","key","fontFamily","fontSize","boxShadow","to","frontmatter","timeToRead","dangerouslySetInnerHTML","__html","spoiler","pageQuery"],"mappings":"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","file":"component---src-templates-blog-index-js-769a16591e780953f0e2.js","sourcesContent":["import React from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\n\nconst query = graphql`\n  query GetSiteMetadata {\n    site {\n      siteMetadata {\n        title\n        author\n        description\n        siteUrl\n        social {\n          twitter\n        }\n      }\n    }\n  }\n`\n\nfunction SEO({ meta, image, title, description, slug, lang = 'en' }) {\n  return (\n    <StaticQuery\n      query={query}\n      render={data => {\n        const { siteMetadata } = data.site\n        const metaDescription = description || siteMetadata.description\n        const metaImage = image ? `${siteMetadata.siteUrl}/${image}` : null\n        const url = `${siteMetadata.siteUrl}${slug}`\n        return (\n          <Helmet\n            htmlAttributes={{ lang }}\n            {...(title\n              ? {\n                  titleTemplate: `%s ‚Äî ${siteMetadata.title}`,\n                  title,\n                }\n              : {\n                  title: `${siteMetadata.title} ‚Äî A blog by ÁñèÊó∫`,\n                })}\n            meta={[\n              {\n                name: 'description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:url',\n                content: url,\n              },\n              {\n                property: 'og:title',\n                content: title || siteMetadata.title,\n              },\n              {\n                property: 'og:description',\n                content: metaDescription,\n              },\n              {\n                name: 'twitter:card',\n                content: 'summary',\n              },\n              {\n                name: 'twitter:creator',\n                content: siteMetadata.social.twitter,\n              },\n              {\n                name: 'twitter:title',\n                content: title || siteMetadata.title,\n              },\n              {\n                name: 'twitter:description',\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                metaImage\n                  ? [\n                      {\n                        property: 'og:image',\n                        content: metaImage,\n                      },\n                      {\n                        name: 'twitter:image',\n                        content: metaImage,\n                      },\n                    ]\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  meta: [],\n  title: '',\n  slug: '',\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  image: PropTypes.string,\n  meta: PropTypes.array,\n  slug: PropTypes.string,\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","export function formatReadingTime(minutes) {\n  let cups = Math.round(minutes / 5)\n  let bowls = 0\n  if (cups > 5) {\n    return `${new Array(Math.round(cups / Math.E))\n      .fill('üç±')\n      .join('')} ${minutes} min read`\n  } else {\n    return `${new Array(cups || 1).fill('‚òïÔ∏è').join('')} ${minutes} min read`\n  }\n}\n\n// `lang` is optional and will default to the current user agent locale\nexport function formatPostDate(date, lang) {\n  if (typeof Date.prototype.toLocaleDateString !== 'function') {\n    return date\n  }\n\n  date = new Date(date)\n  const args = [\n    lang,\n    { day: 'numeric', month: 'long', year: 'numeric' },\n  ].filter(Boolean)\n  return date.toLocaleDateString(...args)\n}\n","import React from 'react'\nimport { rhythm } from '../utils/typography'\n\nclass Bio extends React.Component {\n  render() {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          marginBottom: rhythm(2),\n        }}\n      >\n        <p style={{ maxWidth: 310 }}>\n          {'Personal blog by '}\n          <a href=\"https://mobile.twitter.com/shuwan91\">ÁñèÊó∫</a>.\n        </p>\n      </div>\n    )\n  }\n}\n\nexport default Bio\n","import React from 'react'\n\nimport { rhythm } from '../utils/typography'\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <footer\n        style={{\n          marginTop: rhythm(2.5),\n          paddingTop: rhythm(1),\n        }}\n      >\n        <div style={{ float: 'right' }}>\n          <a href=\"/rss.xml\" target=\"_blank\" rel=\"noopener noreferrer\">\n            rss\n          </a>\n        </div>\n        <a\n          href=\"https://mobile.twitter.com/shuwan91\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          twitter\n        </a>{' '}\n        &bull;{' '}\n        <a\n          href=\"https://github.com/xiaomeiwu\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          github\n        </a>{' '}\n        {/* &bull;{' '} */}\n        {/* <a\n          href=\"https://shuwan9-resume.surge.sh\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          resume\n        </a>{' '} */}\n      </footer>\n    )\n  }\n}\n\nexport default Footer\n","import { Link, graphql } from 'gatsby'\nimport { formatPostDate, formatReadingTime } from '../utils/helpers'\n\nimport Bio from '../components/Bio'\nimport Footer from '../components/Footer'\nimport Layout from '../components/Layout'\nimport React from 'react'\nimport SEO from '../components/SEO'\nimport get from 'lodash/get'\nimport { rhythm } from '../utils/typography'\n\nclass BlogIndexTemplate extends React.Component {\n  render() {\n    const siteTitle = get(this.props, 'data.site.siteMetadata.title')\n    const homeSrc = get(this.props, 'data.site.siteMetadata.homeSrc')\n    const homeBg = get(this.props, 'data.site.siteMetadata.homeBg')\n    const langKey = this.props.pageContext.langKey\n\n    const posts = get(this, 'props.data.allMarkdownRemark.edges')\n    return (\n      <Layout\n        location={this.props.location}\n        title={siteTitle}\n        bg={homeBg}\n        src={homeSrc}\n      >\n        <SEO />\n        <aside>\n          <Bio />\n        </aside>\n        <main>\n          {!posts\n            ? null\n            : posts.map(({ node }) => {\n                const title = get(node, 'frontmatter.title') || node.fields.slug\n                return (\n                  <article key={node.fields.slug}>\n                    <header>\n                      <h3\n                        style={{\n                          fontFamily: 'Montserrat, sans-serif',\n                          fontSize: rhythm(1),\n                          marginBottom: rhythm(1 / 4),\n                        }}\n                      >\n                        <Link\n                          style={{ boxShadow: 'none' }}\n                          to={node.fields.slug}\n                          rel=\"bookmark\"\n                        >\n                          {title}\n                        </Link>\n                      </h3>\n                      <small>\n                        {formatPostDate(node.frontmatter.date, langKey)}\n                        {` ‚Ä¢ ${formatReadingTime(node.timeToRead)}`}\n                      </small>\n                    </header>\n                    <p\n                      dangerouslySetInnerHTML={{\n                        __html: node.frontmatter.spoiler,\n                      }}\n                    />\n                  </article>\n                )\n              })}\n        </main>\n        <Footer />\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndexTemplate\n\nexport const pageQuery = graphql`\n  query($langKey: String!) {\n    site {\n      siteMetadata {\n        title\n        description\n        homeSrc\n        homeBg\n      }\n    }\n    allMarkdownRemark(\n      filter: { fields: { langKey: { eq: $langKey } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            langKey\n          }\n          timeToRead\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            spoiler\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}