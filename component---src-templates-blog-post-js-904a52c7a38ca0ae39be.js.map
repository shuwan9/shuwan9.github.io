{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/utils/helpers.js","webpack:///./src/components/Bio.js","webpack:///./i18n.js","webpack:///./src/components/Panel.js","webpack:///./src/utils/whitelist.js","webpack:///./src/utils/i18n.js","webpack:///./src/templates/blog-post.js"],"names":["SEO","meta","image","title","description","slug","lang","query","render","data","siteMetadata","site","metaDescription","metaImage","siteUrl","url","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","formatReadingTime","minutes","cups","Math","round","Array","E","fill","join","formatPostDate","date","Date","prototype","toLocaleDateString","args","day","month","year","filter","Boolean","Bio","style","display","marginBottom","rhythm","maxWidth","href","React","Component","exports","supportedLanguages","en","ru","tr","es","ko","sv","it","id","pl","ja","fr","he","hu","vi","th","my","sk","te","uk","bg","cs","de","nl","nb","fa","ar","sr","Panel","children","fontSize","border","borderRadius","padding","background","wordBreak","codeToLanguage","code","replace","systemFont","Translations","this","props","translations","languageLink","editUrl","readerTranslations","hasRussianTranslation","indexOf","className","fontFamily","length","to","map","l","i","Fragment","key","target","rel","BlogPostTemplate","console","log","post","markdownRemark","siteTitle","get","fileServerUrl","pageContext","previous","next","translatedLinks","fields","langKey","html","matches","match","forEach","whitelist","replaceAnchorLinksByLanguage","link","translatedLink","RegExp","slice","sort","a","b","loadFontsForCode","rawSlug","targetLang","createLanguageLink","Layout","location","src","frontmatter","spoiler","color","scale","marginTop","timeToRead","dangerouslySetInnerHTML","__html","margin","boxShadow","textDecoration","flexWrap","justifyContent","listStyle","marginRight","pageQuery"],"mappings":"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","file":"component---src-templates-blog-post-js-904a52c7a38ca0ae39be.js","sourcesContent":["import React from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\n\nconst query = graphql`\n  query GetSiteMetadata {\n    site {\n      siteMetadata {\n        title\n        author\n        description\n        siteUrl\n        social {\n          twitter\n        }\n      }\n    }\n  }\n`\n\nfunction SEO({ meta, image, title, description, slug, lang = 'en' }) {\n  return (\n    <StaticQuery\n      query={query}\n      render={data => {\n        const { siteMetadata } = data.site\n        const metaDescription = description || siteMetadata.description\n        const metaImage = image ? `${siteMetadata.siteUrl}/${image}` : null\n        const url = `${siteMetadata.siteUrl}${slug}`\n        return (\n          <Helmet\n            htmlAttributes={{ lang }}\n            {...(title\n              ? {\n                  titleTemplate: `%s — ${siteMetadata.title}`,\n                  title,\n                }\n              : {\n                  title: `${siteMetadata.title} — A blog by 疏旺`,\n                })}\n            meta={[\n              {\n                name: 'description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:url',\n                content: url,\n              },\n              {\n                property: 'og:title',\n                content: title || siteMetadata.title,\n              },\n              {\n                property: 'og:description',\n                content: metaDescription,\n              },\n              {\n                name: 'twitter:card',\n                content: 'summary',\n              },\n              {\n                name: 'twitter:creator',\n                content: siteMetadata.social.twitter,\n              },\n              {\n                name: 'twitter:title',\n                content: title || siteMetadata.title,\n              },\n              {\n                name: 'twitter:description',\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                metaImage\n                  ? [\n                      {\n                        property: 'og:image',\n                        content: metaImage,\n                      },\n                      {\n                        name: 'twitter:image',\n                        content: metaImage,\n                      },\n                    ]\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  meta: [],\n  title: '',\n  slug: '',\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  image: PropTypes.string,\n  meta: PropTypes.array,\n  slug: PropTypes.string,\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","export function formatReadingTime(minutes) {\n  let cups = Math.round(minutes / 5)\n  let bowls = 0\n  if (cups > 5) {\n    return `${new Array(Math.round(cups / Math.E))\n      .fill('🍱')\n      .join('')} ${minutes} min read`\n  } else {\n    return `${new Array(cups || 1).fill('☕️').join('')} ${minutes} min read`\n  }\n}\n\n// `lang` is optional and will default to the current user agent locale\nexport function formatPostDate(date, lang) {\n  if (typeof Date.prototype.toLocaleDateString !== 'function') {\n    return date\n  }\n\n  date = new Date(date)\n  const args = [\n    lang,\n    { day: 'numeric', month: 'long', year: 'numeric' },\n  ].filter(Boolean)\n  return date.toLocaleDateString(...args)\n}\n","import React from 'react'\nimport { rhythm } from '../utils/typography'\n\nclass Bio extends React.Component {\n  render() {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          marginBottom: rhythm(2),\n        }}\n      >\n        <p style={{ maxWidth: 310 }}>\n          {'Personal blog by '}\n          <a href=\"https://mobile.twitter.com/shuwan91\">疏旺</a>.\n        </p>\n      </div>\n    )\n  }\n}\n\nexport default Bio\n","// Please keep keys lowercase!\nexports.supportedLanguages = {\n  en: 'English',\n  ru: 'Русский',\n  tr: 'Türkçe',\n  es: 'Español',\n  ko: '한국어',\n  sv: 'Svenska',\n  it: 'Italiano',\n  id: 'Bahasa Indonesia',\n  'pt-br': 'Português do Brasil',\n  pl: 'Polski',\n  'zh-hant': '繁體中文',\n  'zh-hans': '简体中文',\n  ja: '日本語',\n  fr: 'Français',\n  he: 'עברית',\n  hu: 'Magyar',\n  vi: 'Tiếng Việt',\n  th: 'ไทย',\n  my: 'မြန်မာဘာသာ',\n  sk: 'Slovenčina',\n  te: 'తెలుగు',\n  uk: 'Українська',\n  bg: 'Български',\n  cs: 'Čeština',\n  de: 'Deutsch',\n  nl: 'Nederlands',\n  nb: 'Norsk',\n  fa: 'فارسی',\n  ar: 'العربية',\n  sr: 'srpski',\n};\n","import React from 'react'\n\nfunction Panel({ children, style = {} }) {\n  return (\n    <p\n      style={{\n        fontSize: '0.9em',\n        border: '1px solid var(--hr)',\n        borderRadius: '0.75em',\n        padding: '0.75em',\n        background: 'var(--inlineCode-bg)',\n        wordBreak: 'keep-all',\n        ...style,\n      }}\n    >\n      {children}\n    </p>\n  )\n}\n\nexport default Panel\n","// Please keep keys lowercase!\nexport default {\n  'https://reactjs.org': {\n    'pt-br': 'https://pt-br.reactjs.org',\n    // other languages...\n  },\n  // other links...\n}\n","import { supportedLanguages } from './../../i18n'\nimport whitelist from './whitelist'\n\n// This is kind of a mess for some languages.\n// Try to be as short as possible.\n// Make sure you use a real code (e.g. \"ja\", not \"jp\").\n// Some resources:\n// http://www.rfc-editor.org/rfc/bcp/bcp47.txt\n// https://www.w3.org/International/articles/language-tags/\n// https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\n// https://discuss.httparchive.org/t/what-are-the-invalid-uses-of-the-lang-attribute/1022\n\nexport const codeToLanguage = code =>\n  supportedLanguages[code].replace(/ /g, ' ' /* nbsp */)\n\nexport const loadFontsForCode = code => {\n  switch (code) {\n    case 'ru':\n    case 'bg':\n      import('../fonts/fonts-shared.cyrillic.css')\n      import('../fonts/fonts-post.cyrillic.css')\n      break\n    case 'uk':\n      import('../fonts/fonts-shared.cyrillic.css')\n      import('../fonts/fonts-post.cyrillic.css')\n      import('../fonts/fonts-shared.latin-ext.css')\n      import('../fonts/fonts-post.latin-ext.css')\n      break\n    case 'cs':\n    case 'da':\n    case 'de':\n    case 'es':\n    case 'fi':\n    case 'fr':\n    case 'he':\n    case 'hu':\n    case 'it':\n    case 'nl':\n    case 'no':\n    case 'pl':\n    case 'pt-br':\n    case 'sk':\n    case 'sr':\n    case 'sq':\n    case 'sv':\n    case 'tr':\n      import('../fonts/fonts-shared.latin-ext.css')\n      import('../fonts/fonts-post.latin-ext.css')\n      break\n    case 'vi':\n      import('../fonts/fonts-shared.vietnamese.css')\n      import('../fonts/fonts-post.vietnamese.css')\n      break\n    case 'fa':\n      import('../fonts/fonts-post.persian.css')\n      break\n    case 'ar':\n      import('../fonts/fonts-post.arabic.css')\n      break\n    default:\n      break\n  }\n}\n\n// TODO: the curried signature is weird.\nexport const createLanguageLink = (slug, lang) => {\n  const rawSlug = slug.replace(`${lang}/`, '')\n\n  return targetLang =>\n    targetLang === 'en' ? rawSlug : `${targetLang}${rawSlug}`\n}\n\nexport const replaceAnchorLinksByLanguage = (html, code) => {\n  // Match any link using https://regexr.com/4airl\n  const matches = html.match(/https?:\\/\\/(www)?[^\\/\\s)\"?]+/gm)\n\n  // Return same html if no matches were found\n  // or code isn't supported\n  if (!matches || !supportedLanguages[code]) {\n    return html\n  }\n\n  matches.forEach(url => {\n    // Replace to locale url if and only if exists in whitelist\n    // and has code registered\n    if (whitelist[url] && whitelist[url][code]) {\n      html = html.replace(url, whitelist[url][code])\n    }\n  })\n\n  return html\n}\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport get from 'lodash/get'\n\nimport '../fonts/fonts-post.css'\nimport Bio from '../components/Bio'\nimport Layout from '../components/Layout'\nimport SEO from '../components/SEO'\nimport Panel from '../components/Panel'\nimport { formatPostDate, formatReadingTime } from '../utils/helpers'\nimport { rhythm, scale } from '../utils/typography'\nimport {\n  codeToLanguage,\n  createLanguageLink,\n  loadFontsForCode,\n  replaceAnchorLinksByLanguage,\n} from '../utils/i18n'\nconst systemFont = `system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\",\n    \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\",\n    \"Droid Sans\", \"Helvetica Neue\", sans-serif`\n\nclass Translations extends React.Component {\n  render() {\n    let { translations, lang, languageLink, editUrl } = this.props\n\n    let readerTranslations = translations.filter(lang => lang !== 'ru')\n    let hasRussianTranslation = translations.indexOf('ru') !== -1\n\n    return (\n      <div className=\"translations\">\n        <Panel style={{ fontFamily: systemFont }}>\n          {translations.length > 0 && (\n            <span>\n              {hasRussianTranslation && (\n                <span>\n                  Originally written in:{' '}\n                  {'en' === lang ? (\n                    <b>{codeToLanguage('en')}</b>\n                  ) : (\n                    <Link to={languageLink('en')}>English</Link>\n                  )}\n                  {' • '}\n                  {'ru' === lang ? (\n                    <b>Русский (авторский перевод)</b>\n                  ) : (\n                    <Link to={languageLink('ru')}>\n                      Русский (авторский перевод)\n                    </Link>\n                  )}\n                  <br />\n                  <br />\n                </span>\n              )}\n              <span>Translated by readers into: </span>\n              {readerTranslations.map((l, i) => (\n                <React.Fragment key={l}>\n                  {l === lang ? (\n                    <b>{codeToLanguage(l)}</b>\n                  ) : (\n                    <Link to={languageLink(l)}>{codeToLanguage(l)}</Link>\n                  )}\n                  {i === readerTranslations.length - 1 ? '' : ' • '}\n                </React.Fragment>\n              ))}\n            </span>\n          )}\n          {lang !== 'en' && (\n            <>\n              <br />\n              <br />\n              {lang !== 'ru' && (\n                <>\n                  <Link to={languageLink('en')}>Read the original</Link>\n                  {' • '}\n                  <a href={editUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                    Improve this translation\n                  </a>\n                  {' • '}\n                </>\n              )}\n              <Link to={`/${lang}`}>View all translated posts</Link>{' '}\n            </>\n          )}\n        </Panel>\n      </div>\n    )\n  }\n}\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    console.log(this.props)\n    const post = this.props.data.markdownRemark\n    const siteTitle = get(this.props, 'data.site.siteMetadata.title')\n    const fileServerUrl = get(\n      this.props,\n      'data.site.siteMetadata.fileServerUrl'\n    )\n    let {\n      previous,\n      next,\n      slug,\n      translations,\n      translatedLinks,\n    } = this.props.pageContext\n    const lang = post.fields.langKey\n\n    // Replace original links with translated when available.\n    let html = post.html\n\n    // Replace original anchor links by lang when available in whitelist\n    // see utils/whitelist.js\n    html = replaceAnchorLinksByLanguage(html, lang)\n\n    translatedLinks.forEach(link => {\n      // jeez\n      function escapeRegExp(str) {\n        return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n      }\n      let translatedLink = '/' + lang + link\n      html = html.replace(\n        new RegExp('\"' + escapeRegExp(link) + '\"', 'g'),\n        '\"' + translatedLink + '\"'\n      )\n    })\n\n    translations = translations.slice()\n    translations.sort((a, b) => {\n      return codeToLanguage(a) < codeToLanguage(b) ? -1 : 1\n    })\n\n    loadFontsForCode(lang)\n    // TODO: this curried function is annoying\n    const languageLink = createLanguageLink(slug, lang)\n    const enSlug = languageLink('en')\n    return (\n      <Layout\n        location={this.props.location}\n        title={siteTitle}\n        src={fileServerUrl + post.frontmatter.src}\n        bg={fileServerUrl + post.frontmatter.bg}\n      >\n        <SEO\n          lang={lang}\n          title={post.frontmatter.title}\n          description={post.frontmatter.spoiler}\n          slug={post.fields.slug}\n        />\n        <main>\n          <article>\n            <header>\n              <h1 style={{ color: 'var(--textTitle)' }}>\n                {post.frontmatter.title}\n              </h1>\n              <p\n                style={{\n                  ...scale(-1 / 5),\n                  display: 'block',\n                  marginBottom: rhythm(1),\n                  marginTop: rhythm(-4 / 5),\n                }}\n              >\n                {formatPostDate(post.frontmatter.date, lang)}\n                {` • ${formatReadingTime(post.timeToRead)}`}\n              </p>\n              {translations.length > 0 && (\n                <Translations\n                  translations={translations}\n                  editUrl={editUrl}\n                  languageLink={languageLink}\n                  lang={lang}\n                />\n              )}\n            </header>\n            <div dangerouslySetInnerHTML={{ __html: html }} />\n          </article>\n        </main>\n        <aside>\n          <div\n            style={{\n              margin: '90px 0 40px 0',\n              fontFamily: systemFont,\n            }}\n          />\n          <h3\n            style={{\n              fontFamily: 'Montserrat, sans-serif',\n              marginTop: rhythm(0.25),\n            }}\n          >\n            <Link\n              style={{\n                boxShadow: 'none',\n                textDecoration: 'none',\n                color: 'var(--pink)',\n              }}\n              to={'/'}\n            >\n              shuwan9.js.org\n            </Link>\n          </h3>\n          <Bio />\n          <nav>\n            <ul\n              style={{\n                display: 'flex',\n                flexWrap: 'wrap',\n                justifyContent: 'space-between',\n                listStyle: 'none',\n                padding: 0,\n              }}\n            >\n              <li>\n                {previous && (\n                  <Link\n                    to={previous.fields.slug}\n                    rel=\"prev\"\n                    style={{ marginRight: 20 }}\n                  >\n                    ← {previous.frontmatter.title}\n                  </Link>\n                )}\n              </li>\n              <li>\n                {next && (\n                  <Link to={next.fields.slug} rel=\"next\">\n                    {next.frontmatter.title} →\n                  </Link>\n                )}\n              </li>\n            </ul>\n          </nav>\n        </aside>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n        fileServerUrl\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      timeToRead\n      rawMarkdownBody\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        spoiler\n        src\n        bg\n      }\n      fields {\n        slug\n        langKey\n      }\n    }\n  }\n`\n"],"sourceRoot":""}