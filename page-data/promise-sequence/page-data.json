{"componentChunkName":"component---src-templates-blog-post-js","path":"/promise-sequence/","result":{"data":{"site":{"siteMetadata":{"title":"飞机飞过天空","author":"疏旺","fileServerUrl":"https://cdn.jsdelivr.net/gh/xiaomeiwu/cdn/music/"}},"markdownRemark":{"id":"2d3b5a56-7eb9-56dd-bc74-620f00748094","html":"<p>先上一段代码</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPromise</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>getPromise<span class=\"token punctuation\">)</span></code></pre></div>\n<p>这段代码会在控制台输出什么呢？答案是：会乱序输出数组numbers的每一项，并且每一次运行输出的顺序都不一样(因为这里面setTimeout的间隔是个随机值)。</p>\n<p>实际上，上面的代码模拟了10个异步操作的同步执行，并且完成每个异步操作所需的时间是随机的。</p>\n<p>而实际项目中，常常会遇到这样的情况：一个异步操作会依赖于另一个异步操作的结果，所以只有等一个异步操作完成了之后，才可以执行另一个异步操作。即异步操作的按序执行。</p>\n<p>对应上面的代码，就是要按顺序输出数组numbers的每一项。当然最简单的方式就是callback了，但是上面有10个异步操作，其实已经是callback hell了。</p>\n<p>用promise的实现，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPromise</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">pre<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">getPromise</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面的实现用了Array.prototype.reduce，代码看起来是有点抽象的，简单理解就是拼接了一串.then。</p>\n<p>用async,await来实现则显得优雅了许多——但其实javascript引擎在背后做了很多，这是更高的抽象。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPromise</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> number <span class=\"token keyword\">of</span> numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">getPromise</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","timeToRead":1,"rawMarkdownBody":"\n先上一段代码\n\n```jsx\nconst getPromise = number => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      console.log(number)\n      resolve()\n    }, Math.random() * 1000)\n  })\n}\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.forEach(getPromise)\n```\n这段代码会在控制台输出什么呢？答案是：会乱序输出数组numbers的每一项，并且每一次运行输出的顺序都不一样(因为这里面setTimeout的间隔是个随机值)。\n\n实际上，上面的代码模拟了10个异步操作的同步执行，并且完成每个异步操作所需的时间是随机的。\n\n而实际项目中，常常会遇到这样的情况：一个异步操作会依赖于另一个异步操作的结果，所以只有等一个异步操作完成了之后，才可以执行另一个异步操作。即异步操作的按序执行。\n\n对应上面的代码，就是要按顺序输出数组numbers的每一项。当然最简单的方式就是callback了，但是上面有10个异步操作，其实已经是callback hell了。\n\n用promise的实现，如下：\n\n```jsx\nconst getPromise = number => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      console.log(number)\n      resolve()\n    }, Math.random() * 1000)\n  })\n}\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.reduce(\n  (pre, cur) =>{\n    return pre.then(() => {\n      return getPromise(cur)\n    })},\n  Promise.resolve()\n)\n\n```\n\n上面的实现用了Array.prototype.reduce，代码看起来是有点抽象的，简单理解就是拼接了一串.then。\n\n用async,await来实现则显得优雅了许多——但其实javascript引擎在背后做了很多，这是更高的抽象。\n\n```jsx\nconst getPromise = number => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      console.log(number)\n      resolve()\n    }, Math.random() * 1000)\n  })\n}\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n;(async function(){\n    for(const number of numbers){\n        await getPromise(number)\n    }\n})()\n```\n\n","frontmatter":{"title":"异步操作按序执行","date":"January 01, 2020","spoiler":"promise sequence","src":"hot-river.mp3","bg":"hot-river.png"},"fields":{"slug":"/promise-sequence/","langKey":"en"}}},"pageContext":{"slug":"/promise-sequence/","previous":{"fields":{"slug":"/http-status-code/","langKey":"en","directoryName":"http-status-code"},"frontmatter":{"title":"HTTP状态码"}},"next":{"fields":{"slug":"/my-father/","langKey":"en","directoryName":"my-father"},"frontmatter":{"title":"父亲大人"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}